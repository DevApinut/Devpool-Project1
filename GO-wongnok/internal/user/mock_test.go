// Code generated by mockery v2.53.4. DO NOT EDIT.

package user_test

import (
	model "wongnok/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: claims
func (_m *MockIService) GetByID(claims model.Claims) (model.User, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Claims) (model.User, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(model.Claims) model.User); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(model.Claims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - claims model.Claims
func (_e *MockIService_Expecter) GetByID(claims interface{}) *MockIService_GetByID_Call {
	return &MockIService_GetByID_Call{Call: _e.mock.On("GetByID", claims)}
}

func (_c *MockIService_GetByID_Call) Run(run func(claims model.Claims)) *MockIService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Claims))
	})
	return _c
}

func (_c *MockIService_GetByID_Call) Return(_a0 model.User, _a1 error) *MockIService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_GetByID_Call) RunAndReturn(run func(model.Claims) (model.User, error)) *MockIService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecipes provides a mock function with given fields: userID, claims
func (_m *MockIService) GetRecipes(userID string, claims model.Claims) (model.FoodRecipes, error) {
	ret := _m.Called(userID, claims)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipes")
	}

	var r0 model.FoodRecipes
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.Claims) (model.FoodRecipes, error)); ok {
		return rf(userID, claims)
	}
	if rf, ok := ret.Get(0).(func(string, model.Claims) model.FoodRecipes); ok {
		r0 = rf(userID, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FoodRecipes)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.Claims) error); ok {
		r1 = rf(userID, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_GetRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecipes'
type MockIService_GetRecipes_Call struct {
	*mock.Call
}

// GetRecipes is a helper method to define mock.On call
//   - userID string
//   - claims model.Claims
func (_e *MockIService_Expecter) GetRecipes(userID interface{}, claims interface{}) *MockIService_GetRecipes_Call {
	return &MockIService_GetRecipes_Call{Call: _e.mock.On("GetRecipes", userID, claims)}
}

func (_c *MockIService_GetRecipes_Call) Run(run func(userID string, claims model.Claims)) *MockIService_GetRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.Claims))
	})
	return _c
}

func (_c *MockIService_GetRecipes_Call) Return(_a0 model.FoodRecipes, _a1 error) *MockIService_GetRecipes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_GetRecipes_Call) RunAndReturn(run func(string, model.Claims) (model.FoodRecipes, error)) *MockIService_GetRecipes_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertWithClaims provides a mock function with given fields: claims
func (_m *MockIService) UpsertWithClaims(claims model.Claims) (model.User, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for UpsertWithClaims")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Claims) (model.User, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(model.Claims) model.User); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(model.Claims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_UpsertWithClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWithClaims'
type MockIService_UpsertWithClaims_Call struct {
	*mock.Call
}

// UpsertWithClaims is a helper method to define mock.On call
//   - claims model.Claims
func (_e *MockIService_Expecter) UpsertWithClaims(claims interface{}) *MockIService_UpsertWithClaims_Call {
	return &MockIService_UpsertWithClaims_Call{Call: _e.mock.On("UpsertWithClaims", claims)}
}

func (_c *MockIService_UpsertWithClaims_Call) Run(run func(claims model.Claims)) *MockIService_UpsertWithClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Claims))
	})
	return _c
}

func (_c *MockIService_UpsertWithClaims_Call) Return(_a0 model.User, _a1 error) *MockIService_UpsertWithClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_UpsertWithClaims_Call) RunAndReturn(run func(model.Claims) (model.User, error)) *MockIService_UpsertWithClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
