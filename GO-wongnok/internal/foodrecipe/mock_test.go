// Code generated by mockery v2.53.4. DO NOT EDIT.

package foodrecipe_test

import (
	dto "wongnok/internal/model/dto"

	mock "github.com/stretchr/testify/mock"

	model "wongnok/internal/model"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: request, claims
func (_m *MockIService) Create(request dto.FoodRecipeRequest, claims model.Claims) (model.FoodRecipe, error) {
	ret := _m.Called(request, claims)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.FoodRecipe
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.FoodRecipeRequest, model.Claims) (model.FoodRecipe, error)); ok {
		return rf(request, claims)
	}
	if rf, ok := ret.Get(0).(func(dto.FoodRecipeRequest, model.Claims) model.FoodRecipe); ok {
		r0 = rf(request, claims)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}

	if rf, ok := ret.Get(1).(func(dto.FoodRecipeRequest, model.Claims) error); ok {
		r1 = rf(request, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - request dto.FoodRecipeRequest
//   - claims model.Claims
func (_e *MockIService_Expecter) Create(request interface{}, claims interface{}) *MockIService_Create_Call {
	return &MockIService_Create_Call{Call: _e.mock.On("Create", request, claims)}
}

func (_c *MockIService_Create_Call) Run(run func(request dto.FoodRecipeRequest, claims model.Claims)) *MockIService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.FoodRecipeRequest), args[1].(model.Claims))
	})
	return _c
}

func (_c *MockIService_Create_Call) Return(_a0 model.FoodRecipe, _a1 error) *MockIService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_Create_Call) RunAndReturn(run func(dto.FoodRecipeRequest, model.Claims) (model.FoodRecipe, error)) *MockIService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockIService) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MockIService_Expecter) Delete(id interface{}) *MockIService_Delete_Call {
	return &MockIService_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockIService_Delete_Call) Run(run func(id int)) *MockIService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIService_Delete_Call) Return(_a0 error) *MockIService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIService_Delete_Call) RunAndReturn(run func(int) error) *MockIService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: foodRecipeQuery
func (_m *MockIService) Get(foodRecipeQuery model.FoodRecipeQuery) (model.FoodRecipes, int64, error) {
	ret := _m.Called(foodRecipeQuery)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.FoodRecipes
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(model.FoodRecipeQuery) (model.FoodRecipes, int64, error)); ok {
		return rf(foodRecipeQuery)
	}
	if rf, ok := ret.Get(0).(func(model.FoodRecipeQuery) model.FoodRecipes); ok {
		r0 = rf(foodRecipeQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FoodRecipes)
		}
	}

	if rf, ok := ret.Get(1).(func(model.FoodRecipeQuery) int64); ok {
		r1 = rf(foodRecipeQuery)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(model.FoodRecipeQuery) error); ok {
		r2 = rf(foodRecipeQuery)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - foodRecipeQuery model.FoodRecipeQuery
func (_e *MockIService_Expecter) Get(foodRecipeQuery interface{}) *MockIService_Get_Call {
	return &MockIService_Get_Call{Call: _e.mock.On("Get", foodRecipeQuery)}
}

func (_c *MockIService_Get_Call) Run(run func(foodRecipeQuery model.FoodRecipeQuery)) *MockIService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.FoodRecipeQuery))
	})
	return _c
}

func (_c *MockIService_Get_Call) Return(_a0 model.FoodRecipes, _a1 int64, _a2 error) *MockIService_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIService_Get_Call) RunAndReturn(run func(model.FoodRecipeQuery) (model.FoodRecipes, int64, error)) *MockIService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockIService) GetByID(id int) (model.FoodRecipe, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.FoodRecipe
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.FoodRecipe, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.FoodRecipe); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
func (_e *MockIService_Expecter) GetByID(id interface{}) *MockIService_GetByID_Call {
	return &MockIService_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockIService_GetByID_Call) Run(run func(id int)) *MockIService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIService_GetByID_Call) Return(_a0 model.FoodRecipe, _a1 error) *MockIService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_GetByID_Call) RunAndReturn(run func(int) (model.FoodRecipe, error)) *MockIService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: request, id, claims
func (_m *MockIService) Update(request dto.FoodRecipeRequest, id int, claims model.Claims) (model.FoodRecipe, error) {
	ret := _m.Called(request, id, claims)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.FoodRecipe
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.FoodRecipeRequest, int, model.Claims) (model.FoodRecipe, error)); ok {
		return rf(request, id, claims)
	}
	if rf, ok := ret.Get(0).(func(dto.FoodRecipeRequest, int, model.Claims) model.FoodRecipe); ok {
		r0 = rf(request, id, claims)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}

	if rf, ok := ret.Get(1).(func(dto.FoodRecipeRequest, int, model.Claims) error); ok {
		r1 = rf(request, id, claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - request dto.FoodRecipeRequest
//   - id int
//   - claims model.Claims
func (_e *MockIService_Expecter) Update(request interface{}, id interface{}, claims interface{}) *MockIService_Update_Call {
	return &MockIService_Update_Call{Call: _e.mock.On("Update", request, id, claims)}
}

func (_c *MockIService_Update_Call) Run(run func(request dto.FoodRecipeRequest, id int, claims model.Claims)) *MockIService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.FoodRecipeRequest), args[1].(int), args[2].(model.Claims))
	})
	return _c
}

func (_c *MockIService_Update_Call) Return(_a0 model.FoodRecipe, _a1 error) *MockIService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_Update_Call) RunAndReturn(run func(dto.FoodRecipeRequest, int, model.Claims) (model.FoodRecipe, error)) *MockIService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
